"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/e-prim/","docId":"introduction"},{"type":"link","label":"Configuration","href":"/e-prim/configuration","docId":"configuration"},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Box","href":"/e-prim/components/box","docId":"components/box"},{"type":"link","label":"Typography","href":"/e-prim/components/typography","docId":"components/typography"},{"type":"link","label":"Flex","href":"/e-prim/components/flex","docId":"components/flex"},{"type":"link","label":"Grid","href":"/e-prim/components/grid","docId":"components/grid"},{"type":"link","label":"Icon","href":"/e-prim/components/icon","docId":"components/icon"}]},{"type":"link","label":"Theme Utils","href":"/e-prim/theme-utils","docId":"theme-utils"},{"type":"category","label":"Utils","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"useColorByKey","href":"/e-prim/utils/useColorByKey","docId":"utils/useColorByKey"}]}]},"docs":{"components/box":{"id":"components/box","title":"Box","description":"The box component is the base of all. It\'s the most basic component and it should preferably used as a base for every component in your library. It lies on the concept of the as prop, where you tell the Box what HTML element to render. Based on that prop, not only the DOM changes, but you will get a full auto-complete of the properties of that specific HTML element that you\'ve selected (thanks react-polymorphic-box for the inspiration). The default HTML element if none is specified is a plain div.","sidebar":"tutorialSidebar"},"components/flex":{"id":"components/flex","title":"Flex","description":"Most of the times, the layouts are prototyped by extensively using flex layouts. Configuring its CSS can however get very verbose. This component helps by defining some common props that will help you code faster. As expected, the flex component also exposes all properties of the Box, which won\'t be described here.","sidebar":"tutorialSidebar"},"components/grid":{"id":"components/grid","title":"Grid","description":"As with flex, grid is also widely used for creating layouts. This components exposes some core properties to help you prototype faster. This component is in beta, so any suggestions for additional properties are welcome. As usual, all Box props are also available here.","sidebar":"tutorialSidebar"},"components/icon":{"id":"components/icon","title":"Icon","description":"In most projects, there is a library of icons that\'s used across all parts of the app. Usually (with exceptions for course) the library consists of monochrome square icons. That means that the icons always have 1:1 aspect ratio, the same viewbox size and etc. Creating all those icons one by one is very verbose.","sidebar":"tutorialSidebar"},"components/typography":{"id":"components/typography","title":"Typography","description":"After all, the websites are all about text. Typography is heavily used whatever you do, so this component should help you simplify your code and ship faster. It exposes very simple system that you can use to style your texts. Of course, all Box properties are also supported here","sidebar":"tutorialSidebar"},"configuration":{"id":"configuration","title":"Configuration","description":"The configuration consists of setting up the theme as well as augmenting a few TypeScript interfaces to make all properties type-safe.","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction","description":"e-prim (short from emotion-primitives) is a small abstraction on top of emotion that aims to provide a set of primitives to help you prototype UI faster. It can also be referred to as a core of a design system. It is a good foundation for building your own component libraries or use in any project of course.","sidebar":"tutorialSidebar"},"theme-utils":{"id":"theme-utils","title":"Theme Utils","description":"When configuring the emotion theme, e-prim automatically adds a few utils to the theme. You will have those available everywhere you use the theme (useTheme hook, css prop, styled)","sidebar":"tutorialSidebar"},"utils/useColorByKey":{"id":"utils/useColorByKey","title":"useColorByKey","description":"The useColorByKey hook can be used in your components to resolve a color value, given a PaletteKey.","sidebar":"tutorialSidebar"}}}')}}]);