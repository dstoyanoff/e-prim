"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[603],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=p(n),d=r,m=f["".concat(c,".").concat(d)]||f[d]||u[d]||a;return n?o.createElement(m,i(i({ref:t},s),{},{components:n})):o.createElement(m,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7567:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={title:"Box",sidebar_position:1},i=void 0,l={unversionedId:"components/box",id:"components/box",title:"Box",description:"Introduction",source:"@site/docs/components/box.md",sourceDirName:"components",slug:"/components/box",permalink:"/components/box",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Box",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/configuration"}},c={},p=[{value:"Introduction",id:"introduction",level:2}],s={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The box component is the base of all. It's the most basic component and it should preferably used as a base for every component in your library. It lies on the concept of the ",(0,r.kt)("inlineCode",{parentName:"p"},"as")," prop, where you tell the Box what HTML element to render. Based on that prop, not only the DOM changes, but you will get a full auto-complete of the properties of that specific HTML element that you've selected (thanks ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kripod/react-polymorphic-box"},"react-polymorphic-box")," for the inspiration). The default HTML element if none is specified is a plain ",(0,r.kt)("inlineCode",{parentName:"p"},"div"),"."),(0,r.kt)("p",null,"The box also exposes all system properties for your usage, so you can style it easily. Here is a brief of what it looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'/**\n * regular div with:\n * - padding on all sides equal to 4px\n * - margin on all sides equal to 8px for small devices and 16px for big devices\n */\n<Box p={1} m={{ xs: 2, md: 4 }} width="100%">\n  ...content\n</Box>\n\n<Box as="button" onClick={console.log}>\n  My Button\n</Box>\n\n// specifying an a element will automatically allow you to add href property\n<Box as="a" href="https://github.com/dstoyanoff/e-prim">\n  e-prim\n</Box>\n')))}u.isMDXComponent=!0}}]);