"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[847],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2324:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(5773),a=(n(7294),n(3905));const o={title:"Theme Utils",sidebar_position:3},i=void 0,l={unversionedId:"theme-utils",id:"theme-utils",title:"Theme Utils",description:"When configuring the emotion theme, e-prim automatically adds a few utils to the theme. You will have those available everywhere you use the theme (useTheme hook, css prop, styled)",source:"@site/docs/theme-utils.md",sourceDirName:".",slug:"/theme-utils",permalink:"/e-prim/theme-utils",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Theme Utils",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Icon",permalink:"/e-prim/components/icon"},next:{title:"useColorByKey",permalink:"/e-prim/utils/useColorByKey"}},s={},p=[{value:"mediaUp/mediaDown",id:"mediaupmediadown",level:2},{value:"spacing",id:"spacing",level:2},{value:"transparentColor",id:"transparentcolor",level:2},{value:"colorByKey",id:"colorbykey",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When configuring the emotion theme, ",(0,a.kt)("inlineCode",{parentName:"p"},"e-prim")," automatically adds a few utils to the theme. You will have those available everywhere you use the theme (",(0,a.kt)("inlineCode",{parentName:"p"},"useTheme")," hook, ",(0,a.kt)("inlineCode",{parentName:"p"},"css")," prop, ",(0,a.kt)("inlineCode",{parentName:"p"},"styled"),")"),(0,a.kt)("p",null,"Here is the list of utils that are configured for the theme:"),(0,a.kt)("h2",{id:"mediaupmediadown"},"mediaUp/mediaDown"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mediaUp/mediaDown (breakpoint: keyof TBreakpoint)")),(0,a.kt)("p",null,"You can use those functions to generate a media query based on the breakpoints in your theme. This is usually useful as part of ",(0,a.kt)("inlineCode",{parentName:"p"},"css")," prop or ",(0,a.kt)("inlineCode",{parentName:"p"},"styled")," if you want a specific responsive value that's not available using the box system. Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'// given\n<Box\n  css={({ mediaUp }) => ({\n    width: 100,\n    height: 100,\n    [mediaUp("md")]: {\n      width: "100%"\n    },\n    [mediaDown("md")]: {\n      height: "100%"\n    }\n  })}\n/>\n\n// you get\n{\n  width: "100px",\n  height: "100px",\n  "@media (min-width: 500px)": {\n    width: "100%"\n  },\n  "@media (max-width: 500px)": {\n    height: "100%"\n  }\n}\n')),(0,a.kt)("h2",{id:"spacing"},"spacing"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"spacing(...SpacingUnit)")),(0,a.kt)("p",null,"The spacing util is the same one that you can use in the box system (margins/paddings/gaps). It's actually what's used under the hood in the box. You can pass 1-4 parameters in either a string or numeric form. If the value is a number, it would automatically be converted to pixels. Apart from that, it works exactly like you would expect it in the CSS margin/padding syntax."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Box\n  css={({ spacing }) => ({\n    marginLeft: spacing(10), // 40px\n    marginTop: "10%",\n    marginBottom: "5vh"\n  })}\n/>\n')),(0,a.kt)("h2",{id:"transparentcolor"},"transparentColor"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transparentColor(key: PaletteKey, opacity: number)")),(0,a.kt)("p",null,"The transparent color util takes a key from your palette as well as a transparency value. Based on that, it resolves the color, tries to get it's type (hex, rgb, hsl) and applies the provided opacity. Opacity is interpreted as a percentage (0 - 100);"),(0,a.kt)("h2",{id:"colorbykey"},"colorByKey"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"colorByKey(key: PaletteColor)")),(0,a.kt)("p",null,"Resolves the color value given a palette key from your theme configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Box\n  css={({ colorByKey }) => ({\n    color: colorByKey("neutral.0")\n  })}\n/>\n')))}c.isMDXComponent=!0}}]);